library(factoextra)
library(caret)
library(patchwork)
utilities <- read_csv("https://github.com/reisanar/datasets/raw/master/Utilities.csv")
library(tidyverse)
library(dbscan)
library(factoextra)
library(caret)
library(patchwork)
utilities <- read_csv("https://github.com/reisanar/datasets/raw/master/Utilities.csv")
head(utilities)
# data summary
#percent demand growth over 5%
utilities %>%
# select(c("Company", "Demand_growth", "Cost", "Sales")) %>%
filter(Demand_growth > 5.0) %>%
arrange(desc(Demand_growth))
# was going to use ggdendra here, but I like the example found in the powerpoints
#standardizing the data
preproc_utils <- preProcess(utilities, method = c("scale", "center"))
new_utilities <- predict(preproc_utils, utilities)
new_utilities <- new_utilities %>%
column_to_rownames("Company")
#hierarchical clustering
util_hclusts <-
tibble(#defining methods
method = c("average",
"single",
"complete")) %>%
mutate(
myhclust = map(method,
~factoextra::hcut(
new_utilities,
#this is important here
hc_method = .x,
hc_func = "hclust",
k = 5))
)
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[1]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[2]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[3]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[3],
" linkage"))
p2
#Plotting the other methods and removing one of their y-axis
p1 + p3 + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
spiral <- read_csv("https://github.com/reisanar/datasets/raw/master/spiral.csv")
# select only the first two columns
my_spiral <- select(spiral, 1:2)
ggplot(data = my_spiral) +
geom_point(aes(x = X, y = Y))
ggplot(data = my_spiral) +
geom_point(aes(x = X, y = Y)) +
theme_minimal()
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.15, minPts = 5)
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.15, minPts = 5)
str(spi_dbscan)
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.15, minPts = 5)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.015, minPts = 5)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.3, minPts = 5)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.3, minPts = 3)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.3, minPts = 4)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 4)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.5, minPts = 4)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.15, minPts = 4)
spi_dbscan
fviz_cluster(spi_dbscan, my_spiral,
geom = "point",
ellipse = F) +
theme_minimal
fviz_cluster(spi_dbscan, my_spiral,
geom = "point",
ellipse = F) +
theme_minimal()
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.05, minPts = 4)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 4)
spi_dbscan
fviz_cluster(spi_dbscan, my_spiral,
geom = "point",
ellipse = F) +
theme_minimal()
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 2)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 7)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 8)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 89)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 8)
spi_dbscan
#going to use DBScan here
library(dbscan)
spi_dbscan <- dbscan(my_spiral, eps = 0.4, minPts = 12)
spi_dbscan
spi_kmeans <- kmeans(my_spiral, centers = 3)
spi_kmeans
fviz_cluster(spi_kmeans, my_spiral,
geom = "point",
ellipse = F) +
theme_minimal()
spi_kmeans <- dbscan(my_spiral)
spi_kmeans <- dbscan(my_spiral, eps = .9, minPts = 4)
spi_kmeans
fviz_cluster(spi_kmeans, my_spiral,
geom = "point",
ellipse = F) +
theme_minimal()
spi_kmeans <- hclust(dist(my_spiral), method = "single")
spi_kmeans
fviz_cluster(spi_kmeans, my_spiral,
geom = "point",
ellipse = F) +
theme_minimal()
spi_cut <- cutree(spi_kmeans, k = 3)
spi_results <- my_spiral %>%
mutate(cluster = factor(spi_cut))
ggplot(spi_kmeans, aes(x = X, y = Y)) +
geom_point(aes(color = cluster))
spi_cut <- cutree(spi_kmeans, k = 3)
spi_results <- my_spiral %>%
mutate(cluster = factor(spi_cut))
ggplot(spi_results, aes(x = X, y = Y)) +
geom_point(aes(color = cluster))
spi_cut <- cutree(spi_kmeans, k = 3)
spi_results <- my_spiral %>%
mutate(cluster = factor(spi_cut))
ggplot(spi_results, aes(x = X, y = Y)) +
geom_point(aes(color = cluster)) +
theme_minimal()
# going to use hierarchical clustering here
spi_hclust <- hclust(dist(my_spiral), method = "single")
spi_hclust
spi_cut <- cutree(spi_hclust, k = 3)
spi_results <- my_spiral %>%
mutate(cluster = factor(spi_cut))
ggplot(spi_results, aes(x = X, y = Y)) +
geom_point(aes(color = cluster)) +
theme_minimal()
# going to use hierarchical clustering here
spi_hclust <- hclust(dist(my_spiral), method = "single")
spi_hclust
# going to use hierarchical clustering here
spi_hclust <- hclust(dist(my_spiral), method = "single")
summary(spi_hclust)
# going to use hierarchical clustering here
spi_hclust <- hclust(dist(my_spiral), method = "single")
spi_hclust
arrest <- USArrests
View(arrest)
arrest <- USArrests
#Pre Processing
prep_arrest <- arrest %>% preProcess(c("scale", "center"))
View(prep_arrest)
arrest <- USArrests
#Pre Processing
prep_arrest <- arrest %>%
preProcess(c("scale", "center")) %>%
predict(., arrest)
View(prep_arrest)
# An attempt to show proportionality
r_ij <- cor(prep_arrest)
View(r_ij)
# An attempt to show proportionality
r_ij <- cor(prep_arrest)
eu_dist_sq <- dist(pre_arrest)
# An attempt to show proportionality
r_ij <- cor(prep_arrest)
eu_dist_sq <- dist(prep_arrest)
# An attempt to show proportionality
r_ij <- cor(prep_arrest)
eu_dist_sq <- dist(prep_arrest)^2
?cor
eu_dist_sq
# An attempt to show proportionality
r_ij <- cor(prep_arrest)
eu_dist_sq <- dist(prep_arrest)^2 %>%
select_if(is.na == FALSE)
# An attempt to show proportionality
r_ij <- cor(prep_arrest)
eu_dist_sq <- dist(prep_arrest)^2 %>%
as.vector() %>%
select_if(is.na == FALSE)
# An attempt to show proportionality
r_ij <- cor(prep_arrest)
eu_dist_sq <- dist(prep_arrest)
eu_dist_sq
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest)
#not sure this is right but
other_dist <- 1 - cor(t(prep_arrest))
View(other_dist)
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest)
#not sure this is right but
other_dist <- dist(1 - cor(t(prep_arrest)))
other_dist
eu_dist_sq
?dist
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- 1 - cor(t(prep_arrest))
ggplot()
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- 1 - cor(t(prep_arrest))
ggplot(eu_dist_sq) +
geom_point()
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.data.frame()
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- 1 - cor(t(prep_arrest))
ggplot(eu_dist_sq) +
geom_point()
View(eu_dist_sq)
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- 1 - cor(t(prep_arrest))
prop.test(eu_dist_sq, other_dist)
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest)))
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
ggplot(eu_dist_sq) +
geom_point()
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
ggplot(eu_dist_sq) +
geom_point(aes(x = Arizona))
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
ggplot(eu_dist_sq) +
geom_point(aes(x = Arizona, y = Alabama))
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
ggplot(eu_dist_sq) +
geom_point(aes(x = Arizona, y = Alabama)) +
geom_point(aes(x = other_dist$Arizon, y = other_dist$Alabama, color = "pink"))
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
ggplot(eu_dist_sq) +
geom_point(aes(x = Arizona, y = Alabama)) +
geom_point(aes(x = other_dist$Arizona, y = other_dist$Alabama, color = "pink"))
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
#maybe we can see with a plot?
ggplot(eu_dist_sq) +
geom_point(aes(x = Arizona, y = Alabama)) +
geom_point(aes(x = other_dist$Arizona, y = other_dist$Alabama, color = "pink"))
#just doing it the normal way
eu_dist_sq / other_dist
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest) %>%
as.matrix() %>%
as.data.frame()
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- (1 - cor(t(prep_arrest))) %>%
as.data.frame()
#maybe we can see with a plot?
ggplot(eu_dist_sq) +
geom_point(aes(x = Arizona, y = Alabama)) +
geom_point(aes(x = other_dist$Arizona, y = other_dist$Alabama, color = "pink"))
#just doing it the normal way
summary(eu_dist_sq / other_dist)
#just doing it the normal way
summary(eu_dist_sq / other_dist)
# An attempt to show proportionality
eu_dist_sq <- dist(prep_arrest)
#not sure this is right but, it looks as though the dist function only works if the transpose of this upcoming matrix is taking.
# I assume its because the dist() function does this already.
other_dist <- as.dist(1 - cor(t(prep_arrest)))
#maybe we can see with a plot?
ggplot(eu_dist_sq) +
geom_point(aes(x = Arizona, y = Alabama)) +
geom_point(aes(x = other_dist$Arizona, y = other_dist$Alabama, color = "pink"))
#just doing it the normal way
summary(eu_dist_sq / other_dist)
gene_data <- read_csv("https://github.com/reisanar/datasets/raw/master/gene_data.csv")
gene_sd <- scale(gene_data[ , -1])
table(gene_data$cancer)
View(gene_sd)
#hierarchical clustering
gene_hclusts <-
tibble(#defining methods
method = c("average",
"single",
"complete")) %>%
mutate(
myhclust = map(method,
~factoextra::hcut(
gene_sd,
#this is important here
hc_method = .x,
hc_func = "hclust",
k = 4))
)
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[1]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[2]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[3]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[3],
" linkage"))
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[1]],
rect = TRUE
) +
labs(title = paste0("Using ", gene_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[2]],
rect = TRUE
) +
labs(title = paste0("Using ", gene_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[3]],
rect = TRUE
) +
labs(title = paste0("Using ", gene_hclusts$method[3],
" linkage"))
p1 + p2 + p3
p1 / p2 + p3
p2 + p3
p1
p2 + p3 + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
?factoextra::hcut
View(gene_data)
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[1]],
rect = TRUE,
show_labels = FALSE
) +
labs(title = paste0("Using ", gene_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[2]],
rect = TRUE,
show_labels = FALSE
) +
labs(title = paste0("Using ", gene_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
gene_hclusts$myhclust[[3]],
rect = TRUE,
show_labels = FALSE
) +
labs(title = paste0("Using ", gene_hclusts$method[3],
" linkage"))
p1
#patchworking and plotting
p2 + p3 + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
#making some modifications to this
gene_sd <- gene_sdcolumns_to_rownames(cancer) %>% scale()
#making some modifications to this
gene_sd <- gene_sd %>%
columns_to_rownames(cancer) %>%
scale()
#making some modifications to this
gene_sd <- gene_sd %>%
column_to_rownames("cancer") %>%
scale()
#making some modifications to this
gene_sd <- gene_data %>%
column_to_rownames("cancer") %>%
scale()
?column_to_rownames
source('~/Documents/GitHub/POD-Projects/1D-Heat_equation/R/heat_snapshots.R', echo=TRUE)
setwd("~/Documents/GitHub/POD-Projects/1D-Heat_equation/reports")
knitr::include_graphics("../python-scripts/images/models.gif")
